// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

enum Role {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id          String    @id @default(cuid())
  username    String    @unique // Now required
  name        String // New: required for all users
  phone       String? // New: optional for all users
  dateOfBirth DateTime? // New: optional for all users
  gender      String? // New: optional for all users
  password    String // Now required
  role        Role      @default(PATIENT)

  accounts Account[]
  sessions Session[]

  // Relations to specific profiles
  doctorProfile  Doctor?
  patientProfile Patient?
  appointments   Appointment[]
  patientNotifications PatientNotification[]
}

// Models for Auth.js adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id           String        @id @default(cuid())
  name         String
  bedCount     Int
  // New: One-to-many relationship with Doctor
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  doctorId     String // Foreign key to Doctor
  schedules    Schedule[]
  appointments Appointment[]
}

model Doctor {
  id            String         @id @default(cuid())
  // name String is now on User model
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  schedules     Schedule[]
  appointments  Appointment[]
  notifications Notification[]
  Room          Room[]
}

model Schedule {
  id           String        @id @default(cuid())
  doctor       Doctor        @relation(fields: [doctorId], references: [id])
  doctorId     String
  date         String
  timeSlots    Json
  room         Room          @relation(fields: [roomId], references: [id])
  roomId       String
  appointments Appointment[]
}

model Appointment {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  patient    Patient  @relation(fields: [patientId], references: [id])
  patientId  String
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  doctorId   String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  time       String
  room       Room     @relation(fields: [roomId], references: [id])
  roomId     String
  bedId      Int
  status     String
  createTime DateTime @default(now())
}

model Patient {
  id               String        @id @default(cuid())
  // name String is now on User model
  // phone String? is now on User model
  credibilityScore Int           @default(15)
  isSuspended      Boolean       @default(false)
  user             User          @relation(fields: [userId], references: [id])
  userId           String        @unique
  appointments     Appointment[]
}

model AuditLog {
  id           String   @id @default(cuid())
  timestamp    DateTime @default(now())
  userId       String? // User who performed the action
  userName     String? // Name of the user who performed the action
  userUsername String? // New: Username of the user who performed the action
  userRole     Role? // Role of the user who performed the action
  action       String // e.g., "CREATE_USER", "UPDATE_APPOINTMENT_STATUS"
  entityType   String // e.g., "User", "Appointment", "Room"
  entityId     String? // ID of the entity that was affected
  details      Json? // Additional details about the action (e.g., old/new values)
}

model Notification {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  doctorId      String
  doctor        Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointmentId String
  patientName   String
  message       String
  type          String // e.g., 'APPOINTMENT_CREATED', 'APPOINTMENT_CANCELLED'
  isRead        Boolean  @default(false)

  @@index([doctorId])
}

model PatientNotification {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  appointmentId String
  doctorName    String
  message       String
  type          String    // e.g., 'APPOINTMENT_CREATED_BY_DOCTOR', 'APPOINTMENT_CANCELLED_BY_DOCTOR'
  isRead        Boolean   @default(false)

  @@index([userId])
}
